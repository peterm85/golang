// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package main

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatStreamServiceClient is the client API for ChatStreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatStreamServiceClient interface {
	Chat(ctx context.Context, opts ...grpc.CallOption) (ChatStreamService_ChatClient, error)
}

type chatStreamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatStreamServiceClient(cc grpc.ClientConnInterface) ChatStreamServiceClient {
	return &chatStreamServiceClient{cc}
}

func (c *chatStreamServiceClient) Chat(ctx context.Context, opts ...grpc.CallOption) (ChatStreamService_ChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatStreamService_ServiceDesc.Streams[0], "/bidirecstr.ChatStreamService/Chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatStreamServiceChatClient{stream}
	return x, nil
}

type ChatStreamService_ChatClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type chatStreamServiceChatClient struct {
	grpc.ClientStream
}

func (x *chatStreamServiceChatClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatStreamServiceChatClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatStreamServiceServer is the server API for ChatStreamService service.
// All implementations must embed UnimplementedChatStreamServiceServer
// for forward compatibility
type ChatStreamServiceServer interface {
	Chat(ChatStreamService_ChatServer) error
	mustEmbedUnimplementedChatStreamServiceServer()
}

// UnimplementedChatStreamServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChatStreamServiceServer struct {
}

func (UnimplementedChatStreamServiceServer) Chat(ChatStreamService_ChatServer) error {
	return status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedChatStreamServiceServer) mustEmbedUnimplementedChatStreamServiceServer() {}

// UnsafeChatStreamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatStreamServiceServer will
// result in compilation errors.
type UnsafeChatStreamServiceServer interface {
	mustEmbedUnimplementedChatStreamServiceServer()
}

func RegisterChatStreamServiceServer(s grpc.ServiceRegistrar, srv ChatStreamServiceServer) {
	s.RegisterService(&ChatStreamService_ServiceDesc, srv)
}

func _ChatStreamService_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatStreamServiceServer).Chat(&chatStreamServiceChatServer{stream})
}

type ChatStreamService_ChatServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type chatStreamServiceChatServer struct {
	grpc.ServerStream
}

func (x *chatStreamServiceChatServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatStreamServiceChatServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatStreamService_ServiceDesc is the grpc.ServiceDesc for ChatStreamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatStreamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bidirecstr.ChatStreamService",
	HandlerType: (*ChatStreamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Chat",
			Handler:       _ChatStreamService_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpc/bidirecstr/bidirecstr.proto",
}
